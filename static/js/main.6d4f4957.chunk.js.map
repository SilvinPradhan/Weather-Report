{"version":3,"sources":["Weather.js","App.js","serviceWorker.js","index.js"],"names":["Weather","city","country","temperature","humidity","description","error","className","apiKey","Title","Form","onWeather","onSubmit","e","type","name","placeholder","App","state","undefined","getWeather","a","preventDefault","currentTarget","elements","value","fetch","apiCall","json","main","sys","weather","setState","temp","console","log","message","style","width","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.6d4f4957.chunk.js","sourcesContent":["import React from 'react';\r\nconst Weather = (\r\n    {\r\n        city,\r\n        country,\r\n        temperature,\r\n        humidity,\r\n        description,\r\n        error\r\n    }) => {\r\n        return (\r\n            <div className=\"weather__info\">\r\n                {\r\n                    city && country && (\r\n                        <p className=\"weather__key\">\r\n                            Location: {\" \"}\r\n                            <span className=\"weather__value\">\r\n                                {\" \"}\r\n                                {city}, {country}\r\n                            </span>\r\n                        </p>\r\n                )}\r\n\r\n                {\r\n                    temperature && (\r\n                        <p className=\"weather__key\">\r\n                            Temperature: <span className=\"weather__value\"> {temperature} </span>\r\n                        </p>\r\n                )}\r\n\r\n                {\r\n                    humidity && (\r\n                        <p className=\"weather__key\">\r\n                            Humidity: <span className=\"weather__value\"> {humidity} </span>\r\n                        </p>\r\n                )}\r\n\r\n                {\r\n                    description && (\r\n                        <p className=\"weather__key\">\r\n                            Description: <span className=\"weather__value\"> {description} </span>\r\n                        </p>\r\n                )}\r\n\r\n                {\r\n                    error && (\r\n                        <p className=\"weather__key\">\r\n                            {error}\r\n                        </p>\r\n                )}\r\n\r\n\r\n\r\n            </div>\r\n        );\r\n    };\r\n\r\nexport default Weather;","import React, { Component } from \"react\";\nimport Weather from \"./Weather\";\nimport \"./App.css\";\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\n  /* images */\n\nconst apiKey = \"8ddceeacaf8b95fe943c88fc8389dee0\";\n\nconst Title = () => {\n  return (\n    <div>\n      <h1 className=\"title-container__title\">\n        Weather Finder\n      </h1>\n      <h3 className=\"title-container__subtitle\">\n        Find out temperature, conditions and more...\n      </h3>\n    </div>\n  );\n};\n\nconst Form = ({ onWeather }) => {\n  return (\n    <form onSubmit={e => onWeather(e)}>\n      <input type=\"text\" name=\"city\" placeholder=\"Enter a City\" />\n      <input type=\"text\" name=\"country\" placeholder=\"Enter a Country\" />\n      <button className=\"form-button\">Get Weather</button>\n    </form>\n  );\n};\n\nclass App extends Component {\n  state = {\n    temperature: undefined,\n    city: undefined,\n    country: undefined,\n    humidity: undefined,\n    description: undefined,\n    error: undefined\n  };\n  getWeather = async e => {\n    e.preventDefault();\n    const city = e.currentTarget.elements.city.value;\n    const country = e.currentTarget.elements.country.value;\n    if (city && country) {\n      try {\n        const apiCall = await fetch(\n          `https://cors-anywhere.herokuapp.com/http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${apiKey}&units=metric`\n        );\n        const { main, sys, name, weather } = await apiCall.json();\n        this.setState({\n          temperature: main.temp,\n          city: name,\n          country: sys.country,\n          humidity: main.humidity,\n          description: weather[0].description,\n          error: \"\"\n        });\n      } catch (ex) {\n        console.log(ex.message);\n      }\n    } else {\n      this.setState({\n        temperature: undefined,\n        city: undefined,\n        country: undefined,\n        humidity: undefined,\n        description: undefined,\n        error: \"Please enter valid values!\"\n      });\n    }\n  };\n  render() {\n    return (\n      <div className=\"wrapper\">\n        <div className=\"main\">\n          <div className=\"container\" style={{ width: \"100%\" }}>\n            <div className=\"row\">\n              <div className=\"col-xs-5 title-container\">\n                <Title />\n              </div>\n              <div className=\"col-xs-7 form-container\">\n                <Form onWeather={this.getWeather} />\n                <Weather\n                  temperature={this.state.temperature}\n                  city={this.state.city}\n                  country={this.state.country}\n                  humidity={this.state.humidity}\n                  description={this.state.description}\n                  error={this.state.error}\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}